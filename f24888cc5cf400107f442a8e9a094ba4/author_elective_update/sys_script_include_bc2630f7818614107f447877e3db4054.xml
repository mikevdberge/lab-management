<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_lab_man.cl_app_store_registration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>cl_app_store_registration</name>
        <script><![CDATA[var cl_app_store_registration = Class.create();
cl_app_store_registration.prototype = {
    initialize: function() {},
    register: function(registrationTime) {
        var lastRefresh = new GlideDateTime(gs.getProperty('cl.last_app_registration', '1970-01-01 00:00:00'));
        var now = new GlideDateTime();
        now.addSeconds(0 - registrationTime);

        if (now.compareTo(lastRefresh) != -1) {
            try {
                var version = gs.getProperty('cl.instance_version')+'';
                /*try {
                    var diag = new Diagnostics();
                    diag.nextNode();
                    var diagNode = diag.getNode();

                    var instanceVersion = diagNode.stats["glide.build.name"];
                    if (!gs.nil(instanceVersion))
                        version = instanceVersion + '';
                } catch (error) {
                    gs.warn('Error getting instance build name ' + error, 'config_build_name');
                    return;
                }*/

                var local_url = gs.getProperty('instance_name');
                var local_id = gs.getProperty('instance_id');
                var applications = [];

                var expiration_date = new GlideDateTime();
                expiration_date.addSeconds(registrationTime);

                var content = {};
                var request = new sn_ws.RESTMessageV2();
                request.setEndpoint("https://appstoreprodworker.service-now.com/api/sn_appstore/cloudlabsappsregistration/register");
                request.setBasicAuth(gs.getProperty('cl_app_store_user'), gs.getProperty('cl_app_store_pass'));
                request.setHttpMethod("POST");
                request.setRequestHeader("Accept", "application/json");

                var requestBody = {};
                requestBody.instances = [];

                var inst = {};
                inst.instance_name = local_url;
                inst.instance_id = local_id;
                inst.instance_type = "cloudlab";
                inst.glide_build_name = version;
                inst.expiration_date = expiration_date.getValue();
                inst.applications = applications;

                requestBody.instances.push(inst);

                request.setRequestBody(JSON.stringify(requestBody));
                var response = request.execute();

                if (response.getStatusCode() == 200) {
                    gs.setProperty('cl.app_store_registered', true);
                    gs.setProperty('sn_appclient.app.install.offline', false);
                    gs.setProperty('sn_appclient.upload_base_url', 'https://appstoreprodworker.service-now.com/');
                    gs.info("Instance is Registered with the App Store");

                    this.requestAppStoreRefresh();

                    gs.setProperty('cl.last_app_registration', new GlideDateTime().getDisplayValue());
                }
				else gs.warn(response.getStatusCode());

            } catch (error) {
                gs.warn('Erroring during temp registration ' + error);
            }
        }
    },

    registerAppStore: function() {
        if (gs.getProperty('glide.servlet.uri').indexOf('.lab.service-now.com') == -1) return;

        var registrationTime = 14400;
        var lastRefresh = new GlideDateTime(gs.getProperty('cl.last_app_registration', '1970-01-01 00:00:00'));
        var now = new GlideDateTime();
        now.addSeconds(0 - registrationTime);

        if (now.compareTo(lastRefresh) != -1) {
        /*    var script = "" +
                "var triggerGR = new GlideRecord('sys_trigger');" +
                "triggerGR.initialize();" +
                "triggerGR.next_action = '1969-12-31 16:00:00';" +
                "triggerGR.name = 'Register App Store';" +
                "triggerGR.trigger_type = 0; // Run Once" +
                "triggerGR.script = 'new cl_app_store_registration().register(' + registrationTime + ')';" +
                "var triggerId = triggerGR.insert().sys_id + '';";

            var ge = new GlideScopedEvaluator();
            var si = new GlideRecord("sys_script_include");
            si.addQuery('sys_scope','global');
			si.query();
			si.next();
            si.setValue("script", script);
            ge.evaluateScript(si, "script", {});
			var triggerId = ge.getVariable('triggerId');

            var triggerGR = new GlideRecord('sys_trigger');
            while (triggerGR.get(triggerId)) {
                gs.sleep(1000);
            } */
			this.register(registrationTime);
            gs.info('App store registered until ' + new GlideDateTime().getDisplayValue() + ' ' + gs.getSession().getTimeZoneName());
        } else {
            lastRefresh.addSeconds(registrationTime);
            gs.info('Previous App Store registration too recent.  Registration will be available again at ' + lastRefresh + ' ' + gs.getSession().getTimeZoneName() + ".");
        }
    },

    requestAppStoreRefresh: function() {
        var local_url = gs.getProperty('instance_name');

        // REFRESH PROVIDED BY APP STORE DEV
        var ge = new GlideScopedEvaluator();
        var si = new GlideRecord("sys_script_include");
        si.get("825fd353d733210092610eca5e61039b");
        si.setValue("script", 'gs.setProperty("sn_appclient.client_calls_allowed","true");new UpdateChecker().checkAvailableUpdates();gs.setProperty("sn_appclient.client_calls_allowed","false");');
        ge.evaluateScript(si, "script", {});
        //END REFRESH

        // EW@SNC - adding final cache flush . . . just in case!
        //gs.cacheFlush();

    },
    type: 'cl_app_store_registration'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>eric.williams</sys_created_by>
        <sys_created_on>2020-07-23 12:59:15</sys_created_on>
        <sys_id>bc2630f7818614107f447877e3db4054</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>cl_app_store_registration</sys_name>
        <sys_package display_value="Lab Management" source="x_snc_lab_man">f24888cc5cf400107f442a8e9a094ba4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Lab Management">f24888cc5cf400107f442a8e9a094ba4</sys_scope>
        <sys_update_name>sys_script_include_bc2630f7818614107f447877e3db4054</sys_update_name>
        <sys_updated_by>eric.williams</sys_updated_by>
        <sys_updated_on>2020-07-23 13:52:21</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Lab Management">f24888cc5cf400107f442a8e9a094ba4</application>
        <file_path/>
        <instance_id>752e73ba103110107f440c7703d59ce7</instance_id>
        <instance_name>labinstance001</instance_name>
        <name>sys_script_include_bc2630f7818614107f447877e3db4054</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_snc_lab_man.cl_app_store_registration&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;cl_app_store_registration&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var cl_app_store_registration = Class.create();
cl_app_store_registration.prototype = {
    initialize: function() {},
    register: function(registrationTime) {
        var lastRefresh = new GlideDateTime(gs.getProperty('cl.last_app_registration', '1970-01-01 00:00:00'));
        var now = new GlideDateTime();
        now.addSeconds(0 - registrationTime);

        if (now.compareTo(lastRefresh) != -1) {
            try {
                var version = gs.getProperty('cl.instance_version')+'';
                /*try {
                    var diag = new Diagnostics();
                    diag.nextNode();
                    var diagNode = diag.getNode();

                    var instanceVersion = diagNode.stats["glide.build.name"];
                    if (!gs.nil(instanceVersion))
                        version = instanceVersion + '';
                } catch (error) {
                    gs.warn('Error getting instance build name ' + error, 'config_build_name');
                    return;
                }*/

                var local_url = gs.getProperty('instance_name');
                var local_id = gs.getProperty('instance_id');
                var applications = [];

                var expiration_date = new GlideDateTime();
                expiration_date.addSeconds(registrationTime);

                var content = {};
                var request = new sn_ws.RESTMessageV2();
                request.setEndpoint("https://appstoreprodworker.service-now.com/api/sn_appstore/cloudlabsappsregistration/register");
                request.setBasicAuth(gs.getProperty('cl_app_store_user'), gs.getProperty('cl_app_store_pass'));
                request.setHttpMethod("POST");
                request.setRequestHeader("Accept", "application/json");

                var requestBody = {};
                requestBody.instances = [];

                var inst = {};
                inst.instance_name = local_url;
                inst.instance_id = local_id;
                inst.instance_type = "cloudlab";
                inst.glide_build_name = version;
                inst.expiration_date = expiration_date.getValue();
                inst.applications = applications;

                requestBody.instances.push(inst);

                request.setRequestBody(JSON.stringify(requestBody));
                var response = request.execute();

                if (response.getStatusCode() == 200) {
                    gs.setProperty('cl.app_store_registered', true);
                    gs.setProperty('sn_appclient.app.install.offline', false);
                    gs.setProperty('sn_appclient.upload_base_url', 'https://appstoreprodworker.service-now.com/');
                    gs.info("Instance is Registered with the App Store");

                    this.requestAppStoreRefresh();

                    gs.setProperty('cl.last_app_registration', new GlideDateTime().getDisplayValue());
                }
				else gs.warn(response.getStatusCode());

            } catch (error) {
                gs.warn('Erroring during temp registration ' + error);
            }
        }
    },

    registerAppStore: function() {
        if (gs.getProperty('glide.servlet.uri').indexOf('.lab.service-now.com') == -1) return;

        var registrationTime = 14400;
        var lastRefresh = new GlideDateTime(gs.getProperty('cl.last_app_registration', '1970-01-01 00:00:00'));
        var now = new GlideDateTime();
        now.addSeconds(0 - registrationTime);

        if (now.compareTo(lastRefresh) != -1) {
        /*    var script = "" +
                "var triggerGR = new GlideRecord('sys_trigger');" +
                "triggerGR.initialize();" +
                "triggerGR.next_action = '1969-12-31 16:00:00';" +
                "triggerGR.name = 'Register App Store';" +
                "triggerGR.trigger_type = 0; // Run Once" +
                "triggerGR.script = 'new cl_app_store_registration().register(' + registrationTime + ')';" +
                "var triggerId = triggerGR.insert().sys_id + '';";

            var ge = new GlideScopedEvaluator();
            var si = new GlideRecord("sys_script_include");
            si.addQuery('sys_scope','global');
			si.query();
			si.next();
            si.setValue("script", script);
            ge.evaluateScript(si, "script", {});
			var triggerId = ge.getVariable('triggerId');

            var triggerGR = new GlideRecord('sys_trigger');
            while (triggerGR.get(triggerId)) {
                gs.sleep(1000);
            } */
			this.register(registrationTime);
            gs.info('App store registered until ' + new GlideDateTime().getDisplayValue() + ' ' + gs.getSession().getTimeZoneName());
        } else {
            lastRefresh.addSeconds(registrationTime);
            gs.info('Previous App Store registration too recent.  Registration will be available again at ' + lastRefresh + ' ' + gs.getSession().getTimeZoneName() + ".");
        }
    },

    requestAppStoreRefresh: function() {
        var local_url = gs.getProperty('instance_name');

        // REFRESH PROVIDED BY APP STORE DEV
        var ge = new GlideScopedEvaluator();
        var si = new GlideRecord("sys_script_include");
        si.get("825fd353d733210092610eca5e61039b");
        si.setValue("script", 'gs.setProperty("sn_appclient.client_calls_allowed","true");new UpdateChecker().checkAvailableUpdates();gs.setProperty("sn_appclient.client_calls_allowed","false");');
        ge.evaluateScript(si, "script", {});
        //END REFRESH

        // EW@SNC - adding final cache flush . . . just in case!
        //gs.cacheFlush();

    },
    type: 'cl_app_store_registration'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;eric.williams&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-07-23 12:59:15&lt;/sys_created_on&gt;&lt;sys_id&gt;bc2630f7818614107f447877e3db4054&lt;/sys_id&gt;&lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;&lt;sys_name&gt;cl_app_store_registration&lt;/sys_name&gt;&lt;sys_package display_value="Lab Management" source="x_snc_lab_man"&gt;f24888cc5cf400107f442a8e9a094ba4&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Lab Management"&gt;f24888cc5cf400107f442a8e9a094ba4&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_bc2630f7818614107f447877e3db4054&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;eric.williams&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-07-23 13:52:21&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>521537305</payload_hash>
        <record_name>cl_app_store_registration</record_name>
        <reverted_from/>
        <source>f7e57cb7818614107f447877e3db40c1</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>eric.williams</sys_created_by>
        <sys_created_on>2020-07-23 13:52:21</sys_created_on>
        <sys_id>35a481bf818614107f447877e3db40cd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1737bf242780000001</sys_recorded_at>
        <sys_updated_by>eric.williams</sys_updated_by>
        <sys_updated_on>2020-07-23 13:52:21</sys_updated_on>
        <type>Script Include</type>
        <update_guid>3da481bf678614107fb4fabb426171cc</update_guid>
        <update_guid_history>3da481bf678614107fb4fabb426171cc:521537305,b572893f9a8614103ddfae657e7dc46f:306208441,69f1893fca861410a32a5f4a47eeb912:231975701,0c21013f298614105febd6505385b623:-1756258655,44e0cdfb2286141012bbd65c8b4121db:1533269735,b5a0cdfbd3861410d96453b67fb51e7a:-1211976040,618f34fb308614103d06559d25795d91:-1754707483,27bef8bb1e8614108580ba039726dafe:-726683905,678e3cbbb78614100e7c5e3321244c30:-1864701029,cc5e3cbb68861410568993b43424e328:-889339527,87caf07b0b8614102994abd28f15da47:-1717318161,0c88303b18861410cc9d7231e201e9b8:290794622</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>eric.williams</sys_created_by>
        <sys_created_on>2020-07-23 13:57:46</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>c61f8074526b4550b9077ec12d5c6cf9</sys_id>
        <sys_metadata>bc2630f7818614107f447877e3db4054</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>cl_app_store_registration</sys_name>
        <sys_package display_value="Lab Management" source="x_snc_lab_man">f24888cc5cf400107f442a8e9a094ba4</sys_package>
        <sys_parent/>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Lab Management">f24888cc5cf400107f442a8e9a094ba4</sys_scope>
        <sys_scope_delete display_value="">0883ea1cf04d4920a8c962da30e69564</sys_scope_delete>
        <sys_update_name>sys_script_include_bc2630f7818614107f447877e3db4054</sys_update_name>
        <sys_update_version display_value="sys_script_include_bc2630f7818614107f447877e3db4054">35a481bf818614107f447877e3db40cd</sys_update_version>
        <sys_updated_by>eric.williams</sys_updated_by>
        <sys_updated_on>2020-07-23 13:57:46</sys_updated_on>
    </sys_metadata_delete>
</record_update>
