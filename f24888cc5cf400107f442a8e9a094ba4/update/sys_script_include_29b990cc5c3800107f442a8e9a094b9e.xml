<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_lab_man.labManagement</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>labManagement</name>
        <script><![CDATA[var labManagement = Class.create();
labManagement.prototype = {
    initialize: function() {
        this.debug = false;
        this.endpointPrefix = gs.getProperty('cl.management.host', 'cloudlabs');
        this.instructor_instance = gs.getProperty('cl.instructor_instance');
        this.instanceID = gs.getProperty('instance_id');
        this.instances = [];
        this.class_name = '';
        this.getInstances();
        this.parsed = '';
        // Severity
        this.critical = 1;
        this.major = 2;
        this.minor = 3;
        this.warning = 4;
        this.info = 5;
        this.clear = 0;
    },

    checkInstructor: function() {
        if (this.instructor_instance == "true") {
            // ReEnable Menu Items and SP pages that need to be enabled for Instructors
            var recGR = new GlideRecord('sys_app_module');
            recGR.addEncodedQuery('application=88cd8c045c3800107f442a8e9a094b9d^order<=1499^active=false');
            recGR.query();
            while (recGR.next()) {
                recGR.active = "true";
                recGR.update();
            }
            var pageGR = new GlideRecord('sp_page');
            pageGR.addQuery('title', 'Instance Reservation');
            pageGR.addQuery('public', 'false');
            pageGR.query();
            while (pageGR.next()) {
                pageGR.setValue('public', 'true');
                pageGR.update();
            }
        } else {
            // Disable Menu Items and SP pages that need to be enabled for Instructors
            var recGR = new GlideRecord('sys_app_module');
            recGR.addEncodedQuery('application=88cd8c045c3800107f442a8e9a094b9d^order<=1499^active=true');
            recGR.query();
            while (recGR.next()) {
                recGR.active = "false";
                recGR.update();
            }
            var pageGR = new GlideRecord('sp_page');
            pageGR.addQuery('title', 'Instance Reservation');
            pageGR.addQuery('public', 'true');
            pageGR.query();
            while (pageGR.next()) {
                pageGR.setValue('public', 'false');
                pageGR.update();
            }
        }
    },

    getInstances: function() {
        if (this.instructor_instance == "true") {
            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint('https://' + this.endpointPrefix + '.service-now.com/api/snc/v2/cloud_labs_lab_managment/getInstances/' + this.instanceID + '/0');
            request.setHttpMethod('GET');
            request.setRequestHeader("Accept", "application/json");

            var response = request.execute();
            var parsed = JSON.parse(response.getBody());

            if (this.debug) gs.info(response.getBody());

            this.instances = parsed.instances;
            this.categories = parsed.categories;
            this.suppMaterials = parsed.suppMaterials;
            //if (gs.getProperty('x_snc_lab_man.custom_lab_name') == 'false') {
            gs.setProperty('x_snc_lab_man.lab_name', parsed.class_name);
            //    gs.debug('It worked: ' + parsed.class_name);
            //}
        }
    },

    updateInstances: function() {
        if (this.instructor_instance == "true") {
            var update = '';

            if (this.debug) gs.info("Number of instances: " + this.instances.length);

            while (this.instances.length) {
                var instance = this.instances.pop();
                var instanceID = '';

                var instanceTable = new GlideRecord('x_snc_lab_man_student_instances');
                instanceTable.addQuery('instance_name', instance.name);
                instanceTable.query();

                if (instanceTable.next()) {
                    instanceID = instanceTable.sys_id;
                    update = 'yes';
                } else {
                    instanceTable.initialize();
                }

                instanceTable.instance_name = instance.name;
                instanceTable.url = instance.url;
                instanceTable.user_name = instance.username;
                instanceTable.password = instance.password;
                instanceTable.state = instance.state;

                if (instanceTable.email_address.nil()) {
                    if (instance.student_email != 'AVAILABLE_INSTANCE') {
                        if (instance.student_email != 'UNAVAILABLE') {
                            instanceTable.email_address = instance.student_email.toLowerCase();
                        }
                        instanceTable.reserved = true;
                    } else {
                        instanceTable.reserved = false;
                    }
                }

                if (update == 'yes') {
                    instanceTable.update();
                    instanceID = instanceTable.sys_id;
                } else {
                    instanceID = instanceTable.insert();
                }

                if (this.debug) gs.info("Number of child instances: " + instance.children.length);

                while (instance.children.length) {
                    var childUpdate = '';
                    var child = instance.children.pop();

                    var pairTable = new GlideRecord('x_snc_lab_man_paired_instances');
                    pairTable.addQuery('paired_instance', instanceID);
                    pairTable.addQuery('instance_type', '!=', 'other');
                    pairTable.query();

                    if (pairTable.next()) {
                        childUpdate = 'yes';
                    } else {
                        childUpdate = '';
                        pairTable.initialize();
                    }
                    pairTable.paired_instance = instanceID;
                    pairTable.instance_name = child.name;
                    pairTable.instance_type = child.os;
                    pairTable.url = child.url;
                    pairTable.user_name = child.username;
                    pairTable.password = child.password;
                    if (childUpdate == 'yes') {
                        pairTable.update();
                    } else {
                        pairTable.active = true;
                        pairTable.insert();
                    }

                }
                // Update Cloudlabs with Registration Total
                try {
                    var recGR = new GlideRecord('x_snc_lab_man_student_instances');
                    recGR.addQuery('reserved', true);
                    recGR.addNotNullQuery('email_address');
                    recGR.query();
                    var numInstance = recGR.getRowCount();

                    var request = new sn_ws.RESTMessageV2();
                    request.setEndpoint('https://' + this.endpointPrefix + '.service-now.com/api/snc/v2/cloud_labs_lab_managment/' + this.instanceID + '/' + numInstance);
                    request.setHttpMethod('GET');
                    request.setRequestHeader("Accept", "application/json");

                    var response = request.execute();
                } catch (ex) {
                    var message = ex.getMessage();
                    return message;
                }
            }
            if (this.debug) gs.info("Supp Material: " + this.suppMaterials.length);

            while (this.suppMaterials.length) {

                var suppUpdate = '';
                var item = this.suppMaterials.pop();

                var pairTable = new GlideRecord('x_snc_lab_man_paired_instances');
                pairTable.addQuery('url', item.url);
                pairTable.addQuery('instance_type', 'other');
                pairTable.query();

                if (pairTable.next()) {
                    suppUpdate = 'yes';
                } else {
                    suppUpdate = '';
                    pairTable.initialize();
                }
                pairTable.instance_type.setValue('other');
                pairTable.instance_name = item.description;
                pairTable.url = item.url;
                pairTable.username = item.username;
                pairTable.password = item.password;
                if (suppUpdate == 'yes') {
                    pairTable.update();
                } else {
                    pairTable.active = true;
                    pairTable.insert();
                }
            }
        }
        this.checkInstructor();
    },

    logMessage: function(message, key, severity, info) {
        if (!info) {
            info = "";
        }
        var eventUser = 'labs.event';
        var eventPassword = 'WmNY9w}A!ecZ';
        // Go ahead and log the message locally before we send on to event management
        switch (severity) {
            case 0:
                gs.info(key + message);
                break;
            case 1:
            case 2:
                gs.error(key + message);
                break;
            case 3:
            case 4:
                gs.warn(key + message);
                break;
            case 5:
            default:
                gs.info(key + message);
        }
        var resolutionState = 'New';
        if (severity == 0) resolutionState = 'Closing';
        try {
            var sourceNode = gs.getProperty('instance_name');
            var requestBody = {
                records: [{
                    source: 'CLInstance',
                    node: sourceNode,
                    type: key,
                    resource: sourceNode,
                    severity: severity,
                    resolution_state: resolutionState,
                    description: message,
                    message_key: sourceNode + "|" + key,
                    additional_info: info
                }]
            };
            var eventTargetURL = 'https://' + this.endpointPrefix + '.service-now.com/api/global/em/jsonv2';
            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint(eventTargetURL);
            request.setHttpMethod('POST');
            request.setBasicAuth(eventUser, eventPassword);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestBody(JSON.stringify(requestBody));
            var response = request.execute();
        } catch (error) {
            gs.warn(key + "Error sending event: " + error);
        }
    },

    type: 'labManagement'
};

labManagement.deice_complete = function() {
    var request = new sn_ws.RESTMessageV2();
    var manhost = gs.getProperty('cl.management.host');
    var instance_id = gs.getProperty('instance_id');

    request.setEndpoint('https://' + manhost + '.service-now.com/api/snc/lab_management/deice');
    request.setHttpMethod('POST');

    request.setRequestHeader("Accept", "application/json");
    request.setRequestHeader('Content-Type', 'application/json');
    request.setRequestBody("{\"lab_sysid\":\"" + instance_id + "\"}");
    var response = request.execute();
};

labManagement.reset_passwords = function(student_instance) {
    
	var request = new sn_ws.RESTMessageV2();
    request.setEndpoint(student_instance.url + '/api/x_snc_lab_man/lab_management/reset_password');
    request.setHttpMethod('POST');

    //Eg. UserName="admin", Password="admin" for this code sample.
	//var user = 'trainingadmin';
   // var password = student_instance.password;

    //request.setBasicAuth(user, password);
    request.setRequestHeader("Accept", "application/json");

    var response = request.execute();
    gs.addInfoMessage(response.getBody());
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-10-24 19:42:14</sys_created_on>
        <sys_id>29b990cc5c3800107f442a8e9a094b9e</sys_id>
        <sys_mod_count>78</sys_mod_count>
        <sys_name>labManagement</sys_name>
        <sys_package display_value="Lab Management" source="x_snc_lab_man">f24888cc5cf400107f442a8e9a094ba4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Lab Management">f24888cc5cf400107f442a8e9a094ba4</sys_scope>
        <sys_update_name>sys_script_include_29b990cc5c3800107f442a8e9a094b9e</sys_update_name>
        <sys_updated_by>ice.user</sys_updated_by>
        <sys_updated_on>2021-03-02 20:14:40</sys_updated_on>
    </sys_script_include>
</record_update>
